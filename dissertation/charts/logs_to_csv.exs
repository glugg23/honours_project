#! /usr/bin/env elixir

# A script to turn the logs generated by `docker compose -f docker-compose.yml up > logs.txt` into a csv file

defmodule Converter do
  def to_csv(filename) do
    run = Path.rootname(filename)

    content =
      File.read!(filename)
      |> String.split("\n")
      |> Enum.filter(&String.contains?(&1, "MEASURE"))
      |> Enum.map(fn line ->
        [_, line] = String.split(line, "|")
        String.trim(line)
      end)
      |> Enum.map(&String.replace(&1, ~r/info|MEASURE=|\[|\]/i, ""))
      |> Enum.map(&String.replace(&1, ~r/\s+/, ","))

    [start_time | _] = Enum.at(content, 0) |> String.split(",")

    content =
      Enum.map(content, fn line ->
        [time, round, cpu_usage, memory] = String.split(line, ",")

        case Integer.parse(round) do
          {_value, ""} ->
            Enum.join([run, round, cpu_usage, memory, time], ",")

          :error ->
            ""
        end
      end)
      |> List.insert_at(1, "#{run},0,0,0,#{start_time}")
      |> Enum.join("\n")

    {Integer.parse(run) |> elem(0), content}
  end
end

[experiment | _] = System.argv()
output = "experiment#{experiment}.csv"

content =
  File.ls!()
  |> Enum.filter(&(Path.extname(&1) == ".txt"))
  |> Enum.map(&Task.async(Converter, :to_csv, [&1]))
  |> Task.yield_many(:infinity)
  |> Enum.map(fn f ->
    {_, {:ok, val}} = f
    val
  end)
  |> Enum.sort()
  |> Enum.map(&elem(&1, 1))
  |> Enum.join("")

File.write!(output, "run,round,cpu_usage,memory,time")
File.write!(output, content, [:append])
File.write!(output, "\n", [:append])
